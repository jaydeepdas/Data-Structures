#include <stdio.h>
#include <stdlib.h>
struct node
{
	struct node *next,*prev;
	int info;
};
struct node *create(struct node*,int);
void traverse (struct node*);
struct node* insert(struct node *,int);
struct node* Delete(struct node *head,int);
main()
{
	int pos;
	struct node *head =NULL;
	int ch, n, c;
	while(1)
	{
		printf("\n Enter your choice: \n1.create \n2.Traverse \n3.Insert \n4.Delete \n0.Exit");
		scanf("%d",&ch);
		switch(ch)
		{
			case 1:	printf("Enter the number of nodes");
					scanf("%d",&n);
					head=create(head,n);
					break;
			case 2:	traverse(head);
					break;
			case 3:	printf("\n enter position:");
					scanf("%d",&pos);
					head=insert(head,pos);
					break;
			case 4: //printf("\n deleted item");
					head=Delete(head,pos);
					break;	
			case 0:	exit(0);
		}
	}
}
struct node *create(struct node *head,int n)
{
	int item,i;
	struct node *newnode,*temp;
	if (head!=NULL)
	{
		printf("already created");
		return(head);
	}
	for(i=1;i<=n;i++)
	{
		printf("Enter the item");
		scanf("%d",&item);
		newnode=(struct node *) malloc(sizeof (struct node));
		newnode->info=item;
		newnode->next=NULL;
		if(head==NULL)
		{
			head=newnode;
			newnode->prev=NULL;	
		}
		else
		{
			temp->next=newnode;
			newnode->prev=temp;
		}
		return(head);
	}
}
	
void traverse(struct node *head)
{
	struct node *temp,*q;
		temp=head;
		printf("\n forwaard traverse");
		while(temp!=NULL)
		{
			q=temp;
			printf("%d->",temp->info);
			temp=temp->next;
		}
		printf("\n backword traverse");
		while(q!=NULL)
		{
			printf("%d->",q->info);
			q=q->prev;
			
		}
}
struct node *insert(struct node *head,int pos)
{
		int item;
		struct node *newnode,*temp,*loc;
		int i=1;
		printf("Enter the item");
		scanf("%d",&item);
		newnode=(struct node*)malloc(sizeof(struct node));
		newnode->info=item;
		if(i==pos)
		{
			newnode->prev=NULL;
			newnode->next=head;
			head->prev=newnode;
			return(head);
		}
		temp=head;
		while(i<pos && temp!=NULL)
		{
			loc=temp;
			temp=temp->next;
			i=i+1;
		}
		if(loc->next==NULL)
		{
			loc->next==newnode;
			newnode->next==NULL;
			newnode->prev=loc;
		}
		else
		{
			newnode->prev=loc;
			loc->next=newnode;
			newnode->next=temp;
			temp->prev=newnode;
		}
		return (head);
}

struct node *Delete(struct node *head,int pos)
{
	struct node *ptr,*temp;
	int i=1;
	ptr=head;
	if(i==pos);
	{
		ptr->next->prev=NULL;
		head=ptr->next;
		return head;
	}
	while(i<pos && ptr!=NULL)
	{
		temp=ptr;
		ptr=ptr->next;
		i=i+1;
	}
	if(ptr->next==NULL)
	{
		temp->next=NULL;
	}
	else
	{
		temp->next=ptr->next;
		ptr->next->prev=temp;
	}
	free(ptr);
	return(head);
}
